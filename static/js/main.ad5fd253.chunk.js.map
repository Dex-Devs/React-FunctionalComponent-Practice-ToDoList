{"version":3,"sources":["components/Header.js","components/ToDo.js","components/TodoList.js","App.js","index.js"],"names":["Header","className","ToDo","todoItem","markComplete","style","completed","textDecoration","color","display","type","onChange","id","checked","title","TodoList","todoList","filter","todo","length","map","App","useState","todos","setTodos","todoTitleRef","useRef","LOCAL_STORAGE_KEY","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","ref","placeholder","onClick","e","todoTitle","current","value","trim","alert","find","newTodo","uuid","prevTodos","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAEe,SAASA,IACpB,OACI,qBAAKC,UAAU,mBAAf,SACI,wECHG,SAASC,EAAT,GAA2C,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAMrC,OACI,mCACI,qBAAKH,UAAU,sBAAsBI,MAAOF,EAASG,UAAY,CAACC,eAAgB,eAAgBC,MAAO,wBAA0B,GAAnI,SACI,wBAAOP,UAAU,YAAjB,UACI,uBAAOI,MAAO,CAACI,QAAS,gBACxBC,KAAK,WACLC,SAVC,WACbP,EAAaD,EAASS,KAUVC,UAASV,EAASG,WAAYH,EAASG,YACtC,IACAH,EAASW,aCff,SAASC,EAAT,GAA+C,IAA3BC,EAA0B,EAA1BA,SAAUZ,EAAgB,EAAhBA,aAEzC,OACI,mCACI,sBAAKH,UAAU,kBAAf,UACI,sBAAKA,UAAU,eAAf,UACI,iDACA,gDAAmB,IACf,mCACKe,EAASC,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKZ,aAAqBa,OADvD,MACkEH,EAASG,gBAKlFH,EAASI,KAAI,SAAAF,GAAI,OAAI,cAAC,EAAD,CAAoBf,SAAUe,EAAMd,aAAcA,GAAvCc,EAAKN,Y,YCyFvCS,MAnGf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAeC,mBACfC,EAAoB,aA2E1B,OAxEAC,qBAAU,WACR,IAAML,EAAQM,aAAaC,QAAQH,GAGhCJ,GAAOC,EAASO,KAAKC,MAAMT,MAC7B,IAGHK,qBAAU,WACRC,aAAaI,QAAQN,EAAmBI,KAAKG,UAAUX,MACtD,CAACA,IA+DF,sBAAKtB,UAAU,cAAf,UACE,cAACD,EAAD,IACA,sBAAKC,UAAU,oBAAf,UACE,uBACEkC,IAAKV,EAAcxB,UAAU,cAC7BS,KAAK,OACL0B,YAAY,gBAEd,wBAAQC,QApEQ,SAACC,GAErB,IAAMC,EAAYd,EAAae,QAAQC,MAEvC,KAAIF,GAAeA,EAAUG,OAAOvB,OAAS,GAG3C,OAFAwB,MAAM,gCACNlB,EAAae,QAAQC,MAAQ,MAExB,GAAGlB,EAAMqB,MAAK,SAAA1B,GAAI,OAAIqB,EAAUG,SAAYxB,EAAKJ,SAGtD,OAFA6B,MAAM,mCACNlB,EAAae,QAAQC,MAAQ,MAI/B,IAAMI,EAAU,CAACjC,GAAIkC,cAAQhC,MAAOyB,EAAWjC,WAAW,GAE1DkB,GAAS,SAAAuB,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsBF,OAGxBpB,EAAae,QAAQC,MAAQ,MAgDzB,iBACA,wBACExC,UAAU,kBACVoC,QAlBiB,WACvBb,GAAS,SAAAwB,GACP,OAAOA,EAAU/B,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKZ,iBAcnC,SAGC,mDAGH,cAACS,EAAD,CAAUC,SAAUO,EAAOnB,aAnDJ,SAACQ,GAgB1BY,GAAS,SAAAwB,GACP,OAAO,YAAIA,EAAU5B,KAAI,SAAAF,GACvB,OAAGN,IAAOM,EAAKN,GACN,2BAAIM,GAAX,IAAiBZ,WAAYY,EAAKZ,YAE7BY,gBClEf+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ad5fd253.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header-container\">\r\n            <h1>ToDo List with Functional Components</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function ToDo({ todoItem, markComplete }) {\r\n\r\n    const markTask = () => {\r\n        markComplete(todoItem.id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"todo-item-container\" style={todoItem.completed ? {textDecoration: \"line-through\", color: \"rgba(250,250,250,.8)\"} : {}}>\r\n                <label className=\"todo-item\">\r\n                    <input style={{display: \"inline-block\"}}\r\n                    type=\"checkbox\" \r\n                    onChange={markTask}\r\n                    checked={todoItem.completed ? todoItem.completed : false} />\r\n                    {' '}\r\n                    {todoItem.title}\r\n\r\n                </label>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Todo from \"./ToDo\"\r\nexport default function TodoList({ todoList, markComplete }) {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"todos-container\">\r\n                <div className=\"todos-header\">\r\n                    <h2 >YOUR TASKS LIST</h2>\r\n                    <span>TASKS LEFT: {' '}\r\n                        <strong>\r\n                            {todoList.filter(todo => todo.completed === false).length} / {todoList.length}\r\n                        </strong>\r\n                    </span>\r\n                </div>\r\n\r\n                {todoList.map(todo => <Todo key={todo.id} todoItem={todo} markComplete={markComplete}/>)}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState, useRef, useEffect} from \"react\";\nimport './App.css';\nimport Header from \"./components/Header\"\nimport TodoList from './components/TodoList';\nimport {v4 as uuid} from \"uuid\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const todoTitleRef = useRef();\n  const LOCAL_STORAGE_KEY = \"todos.todo\"\n\n  // render state on storage once\n  useEffect(()=> {\n    const todos = localStorage.getItem(LOCAL_STORAGE_KEY)\n\n    // todos fetched?\n    if(todos) setTodos(JSON.parse(todos));\n  }, []);\n  \n  // track changes to state -- rerender when needed \n  useEffect(()=>{\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  // add new todo\n  const handleAddTodo = (e) => {\n    // get ref\n    const todoTitle = todoTitleRef.current.value;\n    \n    if(!todoTitle || !(todoTitle.trim().length > 0)) {\n      alert(\"Input something to add.\");\n      todoTitleRef.current.value = null;\n      return;\n    } else if(todos.find(todo => todoTitle.trim() ===  todo.title)) {\n      alert(\"Task already on your list.\");\n      todoTitleRef.current.value = null;\n      return;\n    }\n\n    const newTodo = {id: uuid(), title: todoTitle, completed: false};\n    \n    setTodos(prevTodos =>{\n      return [...prevTodos, newTodo];\n    }); \n\n    todoTitleRef.current.value = null;\n  }\n\n  // update todo status\n  const handleTaskComplete = (id) => {\n\n    // APPROACH 1\n    // find todo with id then modify status\n    // const start = Date.now();\n    // const todosCopy = [...todos]; // for immutability\n    // const todoToModify = todosCopy.find(todo => todo.id === id);\n    // todoToModify.completed = !todoToModify.completed;\n\n    // setTodos(todosCopy);\n    // console.log(\"USING FIND\", new Date(Math.floor(Date.now() - start / 1000)).getMilliseconds())\n\n\n    //APPROACH 2\n    // map every element modify todo with id specified\n    // const start1 = Date.now();\n    setTodos(prevState => {\n      return [...prevState.map(todo => {\n        if(id === todo.id) {\n          return {...todo, completed: !todo.completed};\n        }\n        return todo;\n      })];\n    })\n\n    // console.log(\"USING MAP\", new Date(Math.floor(Date.now() - start1 / 1000)).getMilliseconds())\n  }\n\n  // remove already completed todos\n  const handleClearTodos = () => {\n    setTodos(prevState => {\n      return prevState.filter(todo => todo.completed === false);\n    });\n  }\n\n  return (\n    <div className=\"app-wrapper\">\n      <Header />\n      <div className=\"actions-container\">\n        <input \n          ref={todoTitleRef} className=\"title-input\" \n          type=\"text\" \n          placeholder=\"Add task...\"\n        />\n        <button onClick={handleAddTodo}>Add</button>\n        <button \n          className=\"btn-change-text\"\n          onClick={handleClearTodos}\n        ><span>Clear Done</span>\n        </button>\n      </div>\n      <TodoList todoList={todos} markComplete={handleTaskComplete}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}